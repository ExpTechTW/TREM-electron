{"version":3,"file":"hct.js","sourceRoot":"","sources":["../../hct/hct.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n\nimport {Cam16} from './cam16';\nimport {ViewingConditions} from './viewing_conditions';\n\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(hue, chroma, tone);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    const tone = utils.lstarFromArgb(argb);\n    return new Hct(cam.hue, cam.chroma, tone);\n  }\n\n  toInt(): number {\n    return getInt(this.internalHue, this.internalChroma, this.internalTone);\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(getInt(\n        math.sanitizeDegreesDouble(newHue), this.internalChroma,\n        this.internalTone));\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n        getInt(this.internalHue, newChroma, this.internalTone));\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n        getInt(this.internalHue, this.internalChroma, newTone));\n  }\n\n  private constructor(\n      private internalHue: number, private internalChroma: number,\n      private internalTone: number) {\n    this.setInternalState(this.toInt());\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    const tone = utils.lstarFromArgb(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = tone;\n  }\n}\n\n\n/**\n * When the delta between the floor & ceiling of a binary search for maximum\n * chroma at a hue and tone is less than this, the binary search terminates.\n */\nconst CHROMA_SEARCH_ENDPOINT: number = 0.4;\n\n/**\n * The maximum color distance, in CAM16-UCS, between a requested color and the\n * color returned.\n */\nconst DE_MAX: number = 1.0;\n\n/** The maximum difference between the requested L* and the L* returned. */\nconst DL_MAX: number = 0.2;\n\n/**\n * When the delta between the floor & ceiling of a binary search for J,\n * lightness in CAM16, is less than this, the binary search terminates.\n */\nconst LIGHTNESS_SEARCH_ENDPOINT: number = 0.01;\n\n/**\n * @param hue a number, in degrees, representing ex. red, orange, yellow, etc.\n *     Ranges from 0 <= hue < 360.\n * @param chroma Informally, colorfulness. Ranges from 0 to roughly 150.\n *    Like all perceptually accurate color systems, chroma has a different\n *    maximum for any given hue and tone, so the color returned may be lower\n *    than the requested chroma.\n * @param tone Lightness. Ranges from 0 to 100.\n * @return ARGB representation of a color in default viewing conditions\n */\nfunction getInt(hue: number, chroma: number, tone: number): number {\n  return getIntInViewingConditions(\n      math.sanitizeDegreesDouble(hue), chroma,\n      math.clampDouble(0.0, 100.0, tone), ViewingConditions.DEFAULT);\n}\n\n/**\n * @param hue CAM16 hue.\n * @param chroma CAM16 chroma.\n * @param tone L*a*b* lightness.\n * @param viewingConditions Information about the environment where the color\n *     was observed.\n */\nfunction getIntInViewingConditions(\n    hue: number, chroma: number, tone: number,\n    viewingConditions: ViewingConditions): number {\n  if (chroma < 1.0 || Math.round(tone) <= 0.0 || Math.round(tone) >= 100.0) {\n    return utils.argbFromLstar(tone);\n  }\n\n  hue = math.sanitizeDegreesDouble(hue);\n\n  let high = chroma;\n  let mid = chroma;\n  let low = 0.0;\n  let isFirstLoop = true;\n\n  let answer = null;\n  while (Math.abs(low - high) >= CHROMA_SEARCH_ENDPOINT) {\n    const possibleAnswer = findCamByJ(hue, mid, tone);\n\n    if (isFirstLoop) {\n      if (possibleAnswer != null) {\n        return possibleAnswer.viewed(viewingConditions);\n      } else {\n        isFirstLoop = false;\n        mid = low + (high - low) / 2.0;\n        continue;\n      }\n    }\n\n    if (possibleAnswer === null) {\n      high = mid;\n    } else {\n      answer = possibleAnswer;\n      low = mid;\n    }\n\n    mid = low + (high - low) / 2.0;\n  }\n\n  if (answer === null) {\n    return utils.argbFromLstar(tone);\n  }\n\n  return answer.viewed(viewingConditions);\n}\n\n/**\n * @param hue CAM16 hue\n * @param chroma CAM16 chroma\n * @param tone L*a*b* lightness\n * @return CAM16 instance within error tolerance of the provided dimensions,\n *     or null.\n */\nfunction findCamByJ(hue: number, chroma: number, tone: number): Cam16|null {\n  let low = 0.0;\n  let high = 100.0;\n  let mid = 0.0;\n  let bestdL = 1000.0;\n  let bestdE = 1000.0;\n\n  let bestCam = null;\n  while (Math.abs(low - high) > LIGHTNESS_SEARCH_ENDPOINT) {\n    mid = low + (high - low) / 2;\n\n    const camBeforeClip = Cam16.fromJch(mid, chroma, hue);\n    const clipped = camBeforeClip.toInt();\n    const clippedLstar = utils.lstarFromArgb(clipped);\n    const dL = Math.abs(tone - clippedLstar);\n\n    if (dL < DL_MAX) {\n      const camClipped = Cam16.fromInt(clipped);\n      const dE = camClipped.distance(\n          Cam16.fromJch(camClipped.j, camClipped.chroma, hue));\n      if (dE <= DE_MAX && dE <= bestdE) {\n        bestdL = dL;\n        bestdE = dE;\n        bestCam = camClipped;\n      }\n    }\n\n    if (bestdL === 0 && bestdE === 0) {\n      break;\n    }\n\n    if (clippedLstar < tone) {\n      low = mid;\n    } else {\n      high = mid;\n    }\n  }\n\n  return bestCam;\n}\n"]}