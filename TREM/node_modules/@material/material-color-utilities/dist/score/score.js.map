{"version":3,"file":"score.js","sourceRoot":"","sources":["../../score/score.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cam16} from '../hct/cam16';\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0;\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 15.0;\n  private static readonly CUTOFF_TONE = 10.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() {}\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(colorsToPopulation: Map<number, number>, contentColor = false):\n      number[] {\n    // Determine the total count of all colors.\n    let populationSum = 0;\n    for (const population of colorsToPopulation.values()) {\n      populationSum += population;\n    }\n\n\n    // Turn the count of each color into a proportion by dividing by the total\n    // count. Also, fill a cache of CAM16 colors representing each color, and\n    // record the proportion of colors for each CAM16 hue.\n    const colorsToProportion = new Map<number, number>();\n    const colorsToCam = new Map<number, Cam16>();\n    const hueProportions = new Array<number>(360).fill(0);\n    for (const [color, population] of colorsToPopulation.entries()) {\n      const proportion = population / populationSum;\n      colorsToProportion.set(color, proportion);\n\n      const cam = Cam16.fromInt(color);\n      colorsToCam.set(color, cam);\n\n      const hue = Math.round(cam.hue);\n      hueProportions[hue] += proportion;\n    }\n\n    // Determine the proportion of the colors around each color, by summing the\n    // proportions around each color's hue.\n    const colorsToExcitedProportion = new Map<number, number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const hue = Math.round(cam.hue);\n\n      let excitedProportion = 0;\n      for (let i = (hue - 15); i < (hue + 15); i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        excitedProportion += hueProportions[neighborHue];\n      }\n      colorsToExcitedProportion.set(color, excitedProportion);\n    }\n\n    // Score the colors by their proportion, as well as how chromatic they are.\n    const colorsToScore = new Map<number, number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const proportion = colorsToExcitedProportion.get(color)!;\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n\n      const chromaWeight = cam.chroma < Score.TARGET_CHROMA ?\n          Score.WEIGHT_CHROMA_BELOW :\n          Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (cam.chroma - Score.TARGET_CHROMA) * chromaWeight;\n\n      const score = proportionScore + chromaScore;\n      colorsToScore.set(color, score);\n    }\n\n    // Remove colors that are unsuitable, ex. very dark or unchromatic colors.\n    // Also, remove colors that are very similar in hue.\n    const filteredColors = contentColor ?\n        Score.filterContent(colorsToCam) :\n        Score.filter(colorsToExcitedProportion, colorsToCam);\n    const dedupedColorsToScore = new Map<number, number>();\n    for (const color of filteredColors) {\n      let duplicateHue = false;\n      const hue = colorsToCam.get(color)!.hue;\n      for (const [alreadyChosenColor, ] of dedupedColorsToScore) {\n        const alreadyChosenHue = colorsToCam.get(alreadyChosenColor)!.hue;\n        if (math.differenceDegrees(hue, alreadyChosenHue) < 15) {\n          duplicateHue = true;\n          break;\n        }\n      }\n      if (duplicateHue) {\n        continue;\n      }\n      dedupedColorsToScore.set(color, colorsToScore.get(color)!);\n    }\n\n    // Ensure the list of colors returned is sorted such that the first in the\n    // list is the most suitable, and the last is the least suitable.\n    const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());\n    colorsByScoreDescending.sort((first: number[], second: number[]) => {\n      return second[1] - first[1];\n    });\n\n    const answer = colorsByScoreDescending.map((entry: number[]) => {\n      return entry[0];\n    });\n\n    // Ensure that at least one color is returned.\n    if (answer.length === 0) {\n      answer.push(0xff4285F4);  // Google Blue\n    }\n    return answer;\n  }\n\n  private static filter(\n      colorsToExcitedProportion: Map<number, number>,\n      colorsToCam: Map<number, Cam16>): number[] {\n    const filtered = new Array<number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const proportion = colorsToExcitedProportion.get(color)!;\n      if (cam.chroma >= Score.CUTOFF_CHROMA &&\n          utils.lstarFromArgb(color) >= Score.CUTOFF_TONE &&\n          proportion >= Score.CUTOFF_EXCITED_PROPORTION) {\n        filtered.push(color);\n      }\n    }\n    return filtered;\n  }\n\n  private static filterContent(colorsToCam: Map<number, Cam16>): number[] {\n    return Array.from(colorsToCam.keys());\n  }\n}\n"]}